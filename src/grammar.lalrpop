use crate::lexer;

use std::str::FromStr;

grammar<'input>;

extern {
    type Location = usize;
    type Error = lexer::Error;

    enum lexer::Token<'input> {
        string => lexer::Token::StringLiteral(<&'input str>),
        int => lexer::Token::IntLiteral(<&'input str>),
        ident => lexer::Token::Ident(<&'input str>),
        newline => lexer::Token::Newline,
        "+" => lexer::Token::Plus,
        "-" => lexer::Token::Minus,
        "*" => lexer::Token::Times,
        "/" => lexer::Token::Divide,
        "(" => lexer::Token::LParen,
        ")" => lexer::Token::RParen,
    }
}

pub Expr: i32 = {
    <l:Expr> "+" <r:Factor> => l + r,
    <l:Expr> "-" <r:Factor> => l - r,
    Factor,
}

Factor: i32 = {
    <l:Factor> "*" <r:Term> => l * r,
    <l:Factor> "/" <r:Term> => l / r,
    Term,
}

Term: i32 = {
    <int> => i32::from_str(<>).unwrap(),
    "(" <Term> ")",
}
